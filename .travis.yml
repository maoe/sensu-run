# This Travis job script has been generated by a script via
#
#   haskell-ci 'sensu-run.cabal' '--ghc-head' '--osx=8.8.1' '--apt=jq' '--travis-patches=.travis/deploy.patch'
#
# For more information, see https://github.com/haskell-CI/haskell-ci
#
# version: 0.5.20190916
#
language: c
dist: xenial
git:
  # whether to recursively clone submodules
  submodules: false
cache:
  directories:
    - $HOME/.cabal/packages
    - $HOME/.cabal/store
    - $HOME/.ghc-install
before_cache:
  - rm -fv $CABALHOME/packages/hackage.haskell.org/build-reports.log
  # remove files that are regenerated by 'cabal update'
  - rm -fv $CABALHOME/packages/hackage.haskell.org/00-index.*
  - rm -fv $CABALHOME/packages/hackage.haskell.org/*.json
  - rm -fv $CABALHOME/packages/hackage.haskell.org/01-index.cache
  - rm -fv $CABALHOME/packages/hackage.haskell.org/01-index.tar
  - rm -fv $CABALHOME/packages/hackage.haskell.org/01-index.tar.idx
  - rm -rfv $CABALHOME/packages/head.hackage
matrix:
  include:
    - compiler: ghc-8.8.1
      addons: {"apt":{"sources":["hvr-ghc"],"packages":["ghc-8.8.1","cabal-install-3.0","jq"]}}
    - compiler: ghc-8.6.5
      addons: {"apt":{"sources":["hvr-ghc"],"packages":["ghc-8.6.5","cabal-install-3.0","jq"]}}
    - compiler: ghc-8.4.4
      addons: {"apt":{"sources":["hvr-ghc"],"packages":["ghc-8.4.4","cabal-install-3.0","jq"]}}
    - compiler: ghc-head
      addons: {"apt":{"sources":["hvr-ghc"],"packages":["ghc-head","cabal-install-head","jq"]}}
    - compiler: ghc-8.8.1
      addons: {"apt":{"sources":["hvr-ghc"],"packages":["ghc-8.8.1","cabal-install-3.0","jq"]}}
      os: osx
  allow_failures:
    - compiler: ghc-head
before_install:
  - HC=$(echo "/opt/$CC/bin/ghc" | sed 's/-/\//')
  - WITHCOMPILER="-w $HC"
  - HADDOCK=$(echo "/opt/$CC/bin/haddock" | sed 's/-/\//')
  - HCPKG="$HC-pkg"
  - unset CC
  - CABAL=/opt/ghc/bin/cabal
  - CABALHOME=$HOME/.cabal
  - export PATH="$CABALHOME/bin:$PATH"
  - TOP=$(pwd)
  - if [ "$TRAVIS_OS_NAME" = "osx" ]; then brew update; brew upgrade python@3; curl https://haskell.futurice.com/haskell-on-macos.py | python3 - --make-dirs --install-dir=$HOME/.ghc-install --cabal-alias=head install cabal-install-head ${TRAVIS_COMPILER}; fi
  - if [ "$TRAVIS_OS_NAME" = "osx" ]; then HC=$HOME/.ghc-install/ghc/bin/$TRAVIS_COMPILER; WITHCOMPILER="-w $HC"; HCPKG=${HC/ghc/ghc-pkg}; CABAL=$HOME/.ghc-install/ghc/bin/cabal; fi
  - "HCNUMVER=$(${HC} --numeric-version|perl -ne '/^(\\d+)\\.(\\d+)\\.(\\d+)(\\.(\\d+))?$/; print(10000 * $1 + 100 * $2 + ($3 == 0 ? $5 != 1 : $3))')"
  - echo $HCNUMVER
  - CABAL="$CABAL -vnormal+nowrap+markoutput"
  - set -o pipefail
  - |
    echo 'function blue(s) { printf "\033[0;34m" s "\033[0m " }'           >> .colorful.awk
    echo 'BEGIN { state = "output"; }'                                     >> .colorful.awk
    echo '/^-----BEGIN CABAL OUTPUT-----$/ { state = "cabal" }'            >> .colorful.awk
    echo '/^-----END CABAL OUTPUT-----$/ { state = "output" }'             >> .colorful.awk
    echo '!/^(-----BEGIN CABAL OUTPUT-----|-----END CABAL OUTPUT-----)/ {' >> .colorful.awk
    echo '  if (state == "cabal") {'                                       >> .colorful.awk
    echo '    print blue($0)'                                              >> .colorful.awk
    echo '  } else {'                                                      >> .colorful.awk
    echo '    print $0'                                                    >> .colorful.awk
    echo '  }'                                                             >> .colorful.awk
    echo '}'                                                               >> .colorful.awk
  - cat .colorful.awk
  - |
    color_cabal_output () {
      awk -f $TOP/.colorful.awk
    }
  - echo text | color_cabal_output
install:
  - ${CABAL} --version
  - echo "$(${HC} --version) [$(${HC} --print-project-git-commit-id 2> /dev/null || echo '?')]"
  - TEST=--enable-tests
  - BENCH=--enable-benchmarks
  - HEADHACKAGE=false
  - if [ $HCNUMVER -gt 80801 ] ; then HEADHACKAGE=true ; fi
  - rm -f $CABALHOME/config
  - |
    echo "verbose: normal +nowrap +markoutput"          >> $CABALHOME/config
    echo "remote-build-reporting: anonymous"            >> $CABALHOME/config
    echo "write-ghc-environment-files: always"          >> $CABALHOME/config
    echo "remote-repo-cache: $CABALHOME/packages"       >> $CABALHOME/config
    echo "logs-dir:          $CABALHOME/logs"           >> $CABALHOME/config
    echo "world-file:        $CABALHOME/world"          >> $CABALHOME/config
    echo "extra-prog-path:   $CABALHOME/bin"            >> $CABALHOME/config
    echo "symlink-bindir:    $CABALHOME/bin"            >> $CABALHOME/config
    echo "installdir:        $CABALHOME/bin"            >> $CABALHOME/config
    echo "build-summary:     $CABALHOME/logs/build.log" >> $CABALHOME/config
    echo "store-dir:         $CABALHOME/store"          >> $CABALHOME/config
    echo "install-dirs user"                            >> $CABALHOME/config
    echo "  prefix: $CABALHOME"                         >> $CABALHOME/config
    echo "repository hackage.haskell.org"               >> $CABALHOME/config
    echo "  url: http://hackage.haskell.org/"           >> $CABALHOME/config
  - |
    if $HEADHACKAGE; then
    echo "allow-newer: $($HCPKG list --simple-output | sed -E 's/([a-zA-Z-]+)-[0-9.]+/*:\1/g')" >> $CABALHOME/config
    echo "repository head.hackage.ghc.haskell.org"                                        >> $CABALHOME/config
    echo "   url: https://ghc.gitlab.haskell.org/head.hackage/"                           >> $CABALHOME/config
    echo "   secure: True"                                                                >> $CABALHOME/config
    echo "   root-keys: 7541f32a4ccca4f97aea3b22f5e593ba2c0267546016b992dfadcd2fe944e55d" >> $CABALHOME/config
    echo "              26021a13b401500c8eb2761ca95c61f2d625bfef951b939a8124ed12ecf07329" >> $CABALHOME/config
    echo "              f76d08be13e9a61a377a85e2fb63f4c5435d40f8feb3e12eb05905edb8cdea89" >> $CABALHOME/config
    echo "   key-threshold: 3"                                                            >> $CABALHOME/config
    fi
  - |
    echo "program-default-options"                >> $CABALHOME/config
    echo "  ghc-options: $GHCJOBS +RTS -M6G -RTS" >> $CABALHOME/config
  - cat $CABALHOME/config
  - rm -fv cabal.project cabal.project.local cabal.project.freeze
  - travis_retry ${CABAL} v2-update -v
  # Generate cabal.project
  - rm -rf cabal.project cabal.project.local cabal.project.freeze
  - touch cabal.project
  - |
    echo "packages: ." >> cabal.project
  - |
  - "for pkg in $($HCPKG list --simple-output); do echo $pkg | sed 's/-[^-]*$//' | (grep -vE -- '^(sensu-run)$' || true) | sed 's/^/constraints: /' | sed 's/$/ installed/' >> cabal.project.local; done"
  - cat cabal.project || true
  - cat cabal.project.local || true
  - if [ -f "./configure.ac" ]; then (cd "." && autoreconf -i); fi
  - ${CABAL} v2-freeze $WITHCOMPILER ${TEST} ${BENCH} | color_cabal_output
  - "cat cabal.project.freeze | sed -E 's/^(constraints: *| *)//' | sed 's/any.//'"
  - rm  cabal.project.freeze
  - ${CABAL} v2-build $WITHCOMPILER ${TEST} ${BENCH} --dep -j2 all | color_cabal_output
  - ${CABAL} v2-build $WITHCOMPILER --disable-tests --disable-benchmarks --dep -j2 all | color_cabal_output
script:
  - DISTDIR=$(mktemp -d /tmp/dist-test.XXXX)
  # Packaging...
  - ${CABAL} v2-sdist all | color_cabal_output
  # Unpacking...
  - mv dist-newstyle/sdist/*.tar.gz ${DISTDIR}/
  - cd ${DISTDIR} || false
  - find . -maxdepth 1 -type f -name '*.tar.gz' -exec tar -xvf '{}' \;
  - find . -maxdepth 1 -type f -name '*.tar.gz' -exec rm       '{}' \;
  - PKGDIR_sensu_run="$(find . -maxdepth 1 -type d -regex '.*/sensu-run-[0-9.]*')"
  # Generate cabal.project
  - rm -rf cabal.project cabal.project.local cabal.project.freeze
  - touch cabal.project
  - |
    echo "packages: ${PKGDIR_sensu_run}" >> cabal.project
  - |
  - "for pkg in $($HCPKG list --simple-output); do echo $pkg | sed 's/-[^-]*$//' | (grep -vE -- '^(sensu-run)$' || true) | sed 's/^/constraints: /' | sed 's/$/ installed/' >> cabal.project.local; done"
  - cat cabal.project || true
  - cat cabal.project.local || true
  # Building...
  # this builds all libraries and executables (without tests/benchmarks)
  - ${CABAL} v2-build $WITHCOMPILER --disable-tests --disable-benchmarks all | color_cabal_output
  # Building with tests and benchmarks...
  # build & run tests, build benchmarks
  - ${CABAL} v2-build $WITHCOMPILER ${TEST} ${BENCH} all | color_cabal_output
  # cabal check...
  - (cd ${PKGDIR_sensu_run} && ${CABAL} -vnormal check)
  # Building without installed constraints for packages in global-db...
  - rm -f cabal.project.local
  - ${CABAL} v2-build $WITHCOMPILER --disable-tests --disable-benchmarks all | color_cabal_output

# REGENDATA ["sensu-run.cabal","--ghc-head","--osx=8.8.1","--apt=jq","--travis-patches=.travis/deploy.patch"]
# EOF

before_deploy:
- exe=$(jq -r '."install-plan" | .[] | select(."pkg-name" == "sensu-run") | ."bin-file"' < dist-newstyle/cache/plan.json)
- cp "$exe" sensu-run.$TRAVIS_OS_NAME
- gzip -f sensu-run.$TRAVIS_OS_NAME
deploy:
- provider: releases
  api_key:
    secure: bwQKjTJpPGuM9auUZhBkMa8dzt7FAyXbqMVJ8QNVggfanFY4IfCR8uu+Mor2QDr/ugVB2KFWnRbBEHzBz6qdy+U5Y3L7IkECaxDQxY3fpSPEHnGQaam93/KjgeuABzOyMTlGJV/HxD4QxCKEVFiWYQVLbBH+XquMLdkTYrH8ewScTQo28KUqU9VLktDLnNyq/hhCq0M95L8mb6cMJTAWz7LmWtPcJin9WeTsDutukctHUruTXjZocUY5ieq6+SI2UpF1+uI19nHOlSOGmNgEqTD2OJUkgBQHvQzd+5HxjZA4pWHSeiyKB4XAOGr9/LCO5KIkYL1Z5+4iognvlK8Z4bqOg/JMnYRe6nQ5p3huUJobPzIcH3phmEMu2rFVja4Pv3eizNNp7bpXFf4KkjAVCCmtGNRJZbYEU6jzfrUvK0AZ5Y3M7mPYq09ag0hyQKedwkrGle2fj+uuHJopGS46yJwd7ZRxBKZ427L79uD4rkeLQXyPhrMTUUDp2CfwmP+FQt1IGAL1+9TsvLbqWxT7WZiKtMTO4SYiCZG1Sk8VGCLhhA+rf96kPujapAbZKhh2eSS32nDUvU6SkekZMHhyKaugGvAL+Do1b7hIC2qOn/TajiLZskccoqwFB6+ZqBilz9olVB1x79yXZeH02jiSBMjTFxwvKZysRHcNRH6Dj/A=
  file: "sensu-run.$TRAVIS_OS_NAME.gz"
  skip_cleanup: true
  on:
    repo: maoe/sensu-run
    tags: true
    condition: $GITHUB_RELEASE = true
- provider: hackage
  username: MitsutoshiAoe
  password:
    secure: kH7EieRMx+9Sk7K+bo+rFnbZdJ6rlh6nFqCgLXFHTT4ofcvVvQ6bnSWdSleMG0chqElJ0jASqV9V2jpEb7yAoujJRJUbwHsP86A7qZLYkslDdJKLcc5mzuUbD8RqAhumb9BDZFXp+vGXWSaQBoqg9GSyTmsPGWT3GJLiZmEXELZHJMoaN7pEYoNUiCF6cd3Jz/WdXn7QqY9KicqtSeIsvJzy2JNsVwfJ++u2cLdtI+63hPWoCTWMHHIVf3/TLAFHCtYSkB8E2DtodMlqd4b46R4bTKqFiM/27txaizR5VuaPGfA3ygCBZMCP+yPrlhFtG7FOZnfvUiCFD2Q63Uw2MYBKpiTbl7jWoDsA1FHST7kfqEovAWducu4XVoXrcmjIa3cpg9N9eMsXHso/JYMyQQ9NqhbomHYwslIoK29gaLc6H4gyBAUxoVEB/ioko8ZbHqiAZzcxkkXLuewyG791LojdfMqGMEwISEE/KFlte3gJkZFLOYEXz+KSKO4v8MQmtn3cGqaTfa/D5r8NEBAF3vsxuKLRjd80YYqC1Gkp20wNEM+8faVea3U/y43+9ACwRo95l8GIkXl41VArpFNW9+nObsHtMvtYLxElH+hP6To2aHTTa1nWcRC99fopwRPF68VbHyxgrLD6oCN8zHA3SuQ6fx9O5n2zeH+lp+bKBBM=
  on:
    repo: maoe/sensu-run
    tags: true
    condition: $HACKAGE_RELEASE = true
